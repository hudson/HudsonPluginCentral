
package org.hudsonci.plugincentral.model;

import java.io.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.apache.commons.lang.time.FastDateFormat;
import org.apache.maven.model.Model;
import org.apache.maven.model.io.DefaultModelReader;
import org.apache.maven.model.io.ModelReader;
import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.StringUtils;

/**
 * Parse the HPI file to get the Plugin Data
 * @author Winston Prakash
 */
public class HpiProcessor {

    private Model hudsonPluginMavenPom;
    private Attributes manifestAttributes;
    private String downloadSiteUrl;
    private String downloadPath;
    private Date buildDate;
    
    private File hpiFile;
   

    public HpiProcessor(String downloadSiteUrl, String downloadPath) {
        this.downloadSiteUrl = downloadSiteUrl;
        this.downloadPath = downloadPath;
    }

    public Plugin process(File hpiFile) throws IOException, ParseException {
        this.hpiFile = hpiFile;
        JarFile jarFile = new JarFile(hpiFile);
        InputStream manifestIs = jarFile.getInputStream(jarFile.getEntry("META-INF/MANIFEST.MF"));
        manifestAttributes = new Manifest(manifestIs).getMainAttributes();
        String groupId = manifestAttributes.getValue("Group-Id");
        if (groupId == null){
            groupId = "org.jvnet.hudson.plugins";
        }
        String artifactId = manifestAttributes.getValue("Short-Name");
        String pomEntry = "META-INF/maven/" + groupId + "/" + artifactId + "/pom.xml";
        InputStream pomIs = jarFile.getInputStream(jarFile.getEntry(pomEntry));
        String pomPropertiesEntry = "META-INF/maven/" + groupId + "/" + artifactId + "/pom.properties";
        InputStream pomPropertiesIs = jarFile.getInputStream(jarFile.getEntry(pomPropertiesEntry));
        BufferedReader pomPropertiesReader = new BufferedReader(new InputStreamReader(pomPropertiesIs));
        // skip first line (#Generated by Maven)
        pomPropertiesReader.readLine();
        // Read the second line which has the date generated (#Wed Jun 13 15:46:23 PDT 2012)
        DateFormat dateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
        String dateString = pomPropertiesReader.readLine().substring(1); 
        buildDate = dateFormat.parse(dateString);
        
        ModelReader modelReader = new DefaultModelReader();
        hudsonPluginMavenPom = modelReader.read(pomIs, null);
        Plugin plugin = new Plugin();
        plugin.setTitle(getTitle()); 
        plugin.setScm(getScm());
        plugin.setExcerpt(getExcerpt());
        plugin.setReleaseTimestamp(getReleaseTimestamp());
        plugin.setBuildDate(getBuildDate()); 
        plugin.setDevelopers(getDevelopers()); 
        plugin.setDependencies(getDependencies());
        plugin.setUrl(getUrl());
        plugin.setVersion(getVersion()); 
        plugin.setName(getName());
        plugin.setGroupId(getGroupId());
        plugin.setRequiredCore(getRequiredCore()); 
        plugin.setWiki(getWiki()); 
        plugin.setLabels(getLabels()); 
        
        return plugin;
    }

    public String getExcerpt() {
        return hudsonPluginMavenPom.getDescription();
    }

    public String getScm() {
        if (hudsonPluginMavenPom.getScm() != null) {
//            if (hudsonPluginMavenPom.getScm().getConnection().indexOf("svn.dev.java.net") > 0) {
//                return "svn.dev.java.net";
//            } else if (hudsonPluginMavenPom.getScm().getConnection().indexOf("github.com") > 0) {
//                return "github.com";
//            }
            return hudsonPluginMavenPom.getScm().getUrl();
        } else {
            return "";
        }
    }
    
    public String getTitle() {
        String title = hudsonPluginMavenPom.getName();
        if ((title == null) || "".equals(title)) {
            title = hudsonPluginMavenPom.getArtifactId();
        }
        return title;
    }

    public String getReleaseTimestamp() {
        
        FastDateFormat dateFormatter = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss'Z'", new SimpleTimeZone(0, "GMT"));
        return dateFormatter.format(buildDate);
    }
    
    public String getBuildDate() {
        DateFormat dateFormatter = new SimpleDateFormat("MMM d, yyyy");
        return dateFormatter.format(buildDate);
    }

    public List<Dependency> getDependencies() {
        List<Dependency> dependencies = new ArrayList<Dependency>();
        //
        // Plugin-Dependencies: maven-plugin:1.358,dashboard-view:1.5;resolution: =optional                                                                         
        //
        String pluginDependencies = manifestAttributes.getValue("Plugin-Dependencies");
        if (pluginDependencies != null) {
            String[] ds = StringUtils.split(pluginDependencies, ",");
            for (String d : ds) {
                String[] s = StringUtils.split(d, ":");
                if (s.length == 2) {
                    //
                    //  maven-plugin:1.358
                    //
                    dependencies.add(new Dependency(s[0], false, s[1]));
                } else {
                    //
                    // dashboard-view:1.5;resolution: =optional 
                    //
                    dependencies.add(new Dependency(s[0], true, s[1].substring(0, s[1].indexOf(';'))));
                }
            }
        }

        return dependencies;
    }

    public List<Developer> getDevelopers() {
        List<Developer> developers = new ArrayList<Developer>();
        //
        // Plugin-Developers: Ulli Hafner:drulli:                                                                                                         
        //
        String pluginDevelopers = manifestAttributes.getValue("Plugin-Developers");
        if (pluginDevelopers != null) {
            String[] ds = StringUtils.split(pluginDevelopers, ",");
            for (String developer : ds) {
                String[] s = StringUtils.split(developer, ":");
                if (s.length == 2) {
                    //
                    // Ulli Hafner:drulli:
                    //                    
                    developers.add(new Developer(s[0], s[1], null));
                } else if (s.length == 3) {
                    //
                    // Developer Guy:tangjinou:tangjinou@gmail.com
                    //
                    developers.add(new Developer(s[0], s[1], s[2]));
                }
            }
        }

        return developers;
    }
    
    public String getUrl() throws IOException {
                
        String pluginPath = "/" + hudsonPluginMavenPom.getArtifactId() + "/" + getVersion() + "/" + hudsonPluginMavenPom.getArtifactId()  + ".hpi";
        
        File downloadFile = new File(downloadPath, pluginPath);
        downloadFile.getParentFile().mkdirs();
        FileUtils.copyFile(hpiFile, new File(downloadPath, pluginPath));
        hpiFile.delete();
        return downloadSiteUrl + pluginPath;
    }

    public String getVersion() {
        return hudsonPluginMavenPom.getVersion();
    }

    //
    // This was being pulled out of Confluence, but lets start pulling it from the POM. Specifically from a hudsonTags
    // property:
    //
    // <properties>
    //   <hudsonTags>scm,subversion</hudsonTags>
    // </properties>
    //
    public List<String> getLabels() {
        List<String> lables = new ArrayList<String>();
        String hudsonTags = hudsonPluginMavenPom.getProperties().getProperty("hudsonTags");

        if (hudsonTags != null) {
            for (String label : StringUtils.split(hudsonTags, ",")) {
                lables.add(label);
            }
        }

        return lables;
    }

    public String getName() {
        return hudsonPluginMavenPom.getArtifactId();
    }
    
    public String getGroupId() {
        String groupId = hudsonPluginMavenPom.getGroupId();
        if (groupId == null) {
          groupId = hudsonPluginMavenPom.getParent().getGroupId();
        }
        return groupId;
    }

    public String getRequiredCore() {
        return manifestAttributes.getValue("Hudson-Version");
    }

    public String getWiki() {
        return hudsonPluginMavenPom.getUrl();
    }
}
